unit TestuntClasses;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, untClasses, vcl.Dialogs, untInterfaces, SysUtils, frmDataModulo;

type
  // Test methods for class TAdicionarCliente

  TestTAdicionarCliente = class(TTestCase)
  strict private
    FAdicionarCliente: TAdicionarCliente;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestADD;
  end;
  // Test methods for class TAdicionarProdutoVenda

  TestTAdicionarProdutoVenda = class(TTestCase)
  strict private
    FAdicionarProdutoVenda: TAdicionarProdutoVenda;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestADD;
  end;
  // Test methods for class TAdicionarProdutoVendaPorCodBarras

  TestTAdicionarProdutoVendaPorCodBarras = class(TTestCase)
  strict private
    FAdicionarProdutoVendaPorCodBarras: TAdicionarProdutoVendaPorCodBarras;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestADD;
  end;
  // Test methods for class TAdicionarProdutoVendaPorID

  TestTAdicionarProdutoVendaPorID = class(TTestCase)
  strict private
    FAdicionarProdutoVendaPorID: TAdicionarProdutoVendaPorID;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestADD;
  end;

  // Test methods for class TAdicionarProdutoVendaPorID

  TestTAtualizarTotaisVenda = class(TTestCase)
  strict private
    FAtualizarTotaisVenda: TAtualizarTotaisVenda;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestADD;
  end;

  // Test methods for class TCancelarVenda

  TestTCancelarVenda = class(TTestCase)
  strict private
    FCancelarVenda: TCancelarVenda;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCancelar;
  end;
  // Test methods for class TCodigoBarraExistente

  TestTCodigoBarraExistente = class(TTestCase)
  strict private
    FCodigoBarraExistente: TCodigoBarraExistente;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestExiste;
  end;
  // Test methods for class TConfiguracoesShowfrmPrincipal

  TestTConfiguracoesShowfrmPrincipal = class(TTestCase)
  strict private
    FConfiguracoesShowfrmPrincipal: TConfiguracoesShowfrmPrincipal;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIniciar;
  end;
  // Test methods for class TConsultarVendas

  TestTConsultarVendas = class(TTestCase)
  strict private
    FConsultarVendas: TConsultarVendas;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConsultar;
  end;
  // Test methods for class TFinalizarVenda

  TestTFinalizarVenda = class(TTestCase)
  strict private
    FFinalizarVenda: TFinalizarVenda;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFinalizar;
  end;
  // Test methods for class TIniciarNovaVenda

  TestTIniciarNovaVenda = class(TTestCase)
  strict private
    FIniciarNovaVenda: TIniciarNovaVenda;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIniciar;
  end;
  // Test methods for class TVendaIniciada

  TestTVendaIniciada = class(TTestCase)
  strict private
    FVendaIniciada: TVendaIniciada;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIniciada;
  end;
  // Test methods for class TConsultarItensFrmShow

  TestTConsultarItensFrmShow = class(TTestCase)
  strict private
    FConsultarItensFrmShow: TConsultarItensFrmShow;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIniciar;
  end;
  // Test methods for class TSalvarNovoProduto

  TestTSalvarNovoProduto = class(TTestCase)
  strict private
    FSalvarNovoProduto: TSalvarNovoProduto;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSalvar;
  end;

implementation

var
  dmPrincipal: TdmPrincipal;

procedure TestTAdicionarCliente.SetUp;
begin
  FAdicionarCliente := TAdicionarCliente.Create;
end;

procedure TestTAdicionarCliente.TearDown;
begin
  FAdicionarCliente.Free();
  FAdicionarCliente := nil;
end;

procedure TestTAdicionarCliente.TestADD;
var
  ReturnValue: Boolean;
const
  prmDataCadastro: string = '31/10/2021';
  prmDataNascimento: string = '01/01/2000';
  prmEndereco: string = 'Rua das Camélias, 293 - Araguaína Sul - Araguaína/TO';
  prmNomeCliente: string = 'Cliente Venda Final';
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FAdicionarCliente.ADD(prmNomeCliente, prmEndereco, prmDataNascimento,
      prmDataCadastro, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Adicionar Cliente Falhou');
end;

procedure TestTAdicionarProdutoVenda.SetUp;
begin
  FAdicionarProdutoVenda := TAdicionarProdutoVenda.Create;
end;

procedure TestTAdicionarProdutoVenda.TearDown;
begin
  FAdicionarProdutoVenda.Free;
  FAdicionarProdutoVenda := nil;
end;

procedure TestTAdicionarProdutoVenda.TestADD;
var
  ReturnValue: Boolean;
const
  prmQuantidade: Double = 1.35;
  prmIDVenda: Integer = 1;
  prmProduto: string = '1';
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FAdicionarProdutoVenda.ADD(prmProduto, prmIDVenda, prmQuantidade, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Adicionar Produto na venda falhou');
end;

procedure TestTAdicionarProdutoVendaPorCodBarras.SetUp;
begin
  FAdicionarProdutoVendaPorCodBarras := TAdicionarProdutoVendaPorCodBarras.Create;
end;

procedure TestTAdicionarProdutoVendaPorCodBarras.TearDown;
begin
  FAdicionarProdutoVendaPorCodBarras.Free;
  FAdicionarProdutoVendaPorCodBarras := nil;
end;

procedure TestTAdicionarProdutoVendaPorCodBarras.TestADD;
var
  ReturnValue: Boolean;
const
  prmQuantidade: Double = 2;
  prmIDVenda: Integer = 1;
  prmCodBarras: string = '2';
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FAdicionarProdutoVendaPorCodBarras.ADD(prmCodBarras, prmIDVenda,
      prmQuantidade, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Adicionar Produto na venda por cod barras falhou');
end;

procedure TestTAdicionarProdutoVendaPorID.SetUp;
begin
  FAdicionarProdutoVendaPorID := TAdicionarProdutoVendaPorID.Create;
end;

procedure TestTAdicionarProdutoVendaPorID.TearDown;
begin
  FAdicionarProdutoVendaPorID.Free;
  FAdicionarProdutoVendaPorID := nil;
end;

procedure TestTAdicionarProdutoVendaPorID.TestADD;
var
  ReturnValue: Boolean;
const
  prmValorUnitario: Double = 3.19;
  prmQuantidade: Double = 4;
  prmIDVenda: Integer = 1;
  prmIDProduto: Integer = 1;
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FAdicionarProdutoVendaPorID.ADD(prmIDProduto, prmIDVenda, prmQuantidade,
      prmValorUnitario, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Adicionar Produto na venda por ID falhou');
end;

procedure TestTCancelarVenda.SetUp;
begin
  FCancelarVenda := TCancelarVenda.Create;
end;

procedure TestTCancelarVenda.TearDown;
begin
  FCancelarVenda.Free;
  FCancelarVenda := nil;
end;

procedure TestTCancelarVenda.TestCancelar;
var
  ReturnValue: Boolean;
const
  prmIDVenda: Integer = 1;
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FCancelarVenda.Cancelar(prmIDVenda, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Cancelar Venda falhou')
end;

procedure TestTCodigoBarraExistente.SetUp;
begin
  FCodigoBarraExistente := TCodigoBarraExistente.Create;
end;

procedure TestTCodigoBarraExistente.TearDown;
begin
  FCodigoBarraExistente.Free;
  FCodigoBarraExistente := nil;
end;

procedure TestTCodigoBarraExistente.TestExiste;
var
  ReturnValue: Boolean;
Const
  prmCodigo: string = '2';
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FCodigoBarraExistente.Existe(prmCodigo, prmCriarDM);
  CheckTrue(ReturnValue, 'Função código de barras existe falhou');
end;

procedure TestTConfiguracoesShowfrmPrincipal.SetUp;
begin
  FConfiguracoesShowfrmPrincipal := TConfiguracoesShowfrmPrincipal.Create;
end;

procedure TestTConfiguracoesShowfrmPrincipal.TearDown;
begin
  FConfiguracoesShowfrmPrincipal.Free;
  FConfiguracoesShowfrmPrincipal := nil;
end;

procedure TestTConfiguracoesShowfrmPrincipal.TestIniciar;
var
  ReturnValue: Integer;
const
  prmIDNovaVenda: Integer = 0;
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FConfiguracoesShowfrmPrincipal.Iniciar(prmIDNovaVenda, prmCriarDM);
  CheckTrue(ReturnValue>=0, 'Função Configuracoes Show frmPrincipal falhou');
end;

procedure TestTConsultarVendas.SetUp;
begin
  FConsultarVendas := TConsultarVendas.Create;
end;

procedure TestTConsultarVendas.TearDown;
begin
  FConsultarVendas.Free;
  FConsultarVendas := nil;
end;

procedure TestTConsultarVendas.TestConsultar;
var
  ReturnValue: Boolean;
const
  prmNumeroVenda: string = '1';
  prmData: string = '';//'31/10/2021';
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FConsultarVendas.Consultar(prmData, prmNumeroVenda, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Consultar Vendas falhou');
end;

procedure TestTFinalizarVenda.SetUp;
begin
  FFinalizarVenda := TFinalizarVenda.Create;
end;

procedure TestTFinalizarVenda.TearDown;
begin
  FFinalizarVenda.Free;
  FFinalizarVenda := nil;
end;

procedure TestTFinalizarVenda.TestFinalizar;
var
  ReturnValue: Boolean;
const
  prmIDCliente: Integer = 1;
  prmIDVenda: Integer = 1;
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FFinalizarVenda.Finalizar(prmIDVenda, prmIDCliente, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Finalizar Venda falhou');
end;

procedure TestTIniciarNovaVenda.SetUp;
begin
  FIniciarNovaVenda := TIniciarNovaVenda.Create;
end;

procedure TestTIniciarNovaVenda.TearDown;
begin
  FIniciarNovaVenda.Free;
  FIniciarNovaVenda := nil;
end;

procedure TestTIniciarNovaVenda.TestIniciar;
var
  ReturnValue: Integer;
const
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FIniciarNovaVenda.Iniciar(prmCriarDM);
  CheckTrue(ReturnValue>=0, 'Função Iniciar Nova Venda falhou');
end;

procedure TestTVendaIniciada.SetUp;
begin
  FVendaIniciada := TVendaIniciada.Create;
end;

procedure TestTVendaIniciada.TearDown;
begin
  FVendaIniciada.Free;
  FVendaIniciada := nil;
end;

procedure TestTVendaIniciada.TestIniciada;
var
  ReturnValue: Boolean;
const
  prmIDVendaIniciada: Integer = -1;
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FVendaIniciada.Iniciada(prmIDVendaIniciada, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Iniciar Nova Venda falhou');
end;

procedure TestTConsultarItensFrmShow.SetUp;
begin
  FConsultarItensFrmShow := TConsultarItensFrmShow.Create;
end;

procedure TestTConsultarItensFrmShow.TearDown;
begin
  FConsultarItensFrmShow.Free;
  FConsultarItensFrmShow := nil;
end;

procedure TestTConsultarItensFrmShow.TestIniciar;
var
  ReturnValue: Boolean;
const
  prmIDVenda: string = '2';
  prmCriarDM: Boolean = true;
begin
  ReturnValue := FConsultarItensFrmShow.Iniciar(prmIDVenda, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Consultar Itens frmShow');
end;

procedure TestTSalvarNovoProduto.SetUp;
begin
  FSalvarNovoProduto := TSalvarNovoProduto.Create;
end;

procedure TestTSalvarNovoProduto.TearDown;
begin
  FSalvarNovoProduto.Free;
  FSalvarNovoProduto := nil;
end;

procedure TestTSalvarNovoProduto.TestSalvar;
var
  ReturnValue: Boolean;
const
  prmCodBarras: string = '10';
  prmValCompra: string = '3,09';
  prmPrecoUnitario: string = '5,39';
  prmDataAtualizacao: string = '31/10/2021';
  prmCriarDM: Boolean = true;
  prmDataCadastro: string = '31/10/2021';
  prmNomeProduto: string = 'Produto teste ';
begin
  ReturnValue := FSalvarNovoProduto.Salvar(prmNomeProduto, prmDataCadastro, prmDataAtualizacao,
      prmPrecoUnitario, prmValCompra, prmCodBarras, prmCriarDM);
  CheckTrue(ReturnValue, 'Função Salvar Novo Produto');
end;

{ TestTAtualizarTotaisVenda }

procedure TestTAtualizarTotaisVenda.SetUp;
begin
  FAtualizarTotaisVenda := TAtualizarTotaisVenda.Create();
end;

procedure TestTAtualizarTotaisVenda.TearDown;
begin
  FAtualizarTotaisVenda.Free;
  FAtualizarTotaisVenda := nil;
end;

procedure TestTAtualizarTotaisVenda.TestADD;
begin

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAdicionarCliente.Suite);
  RegisterTest(TestTAdicionarProdutoVenda.Suite);
  RegisterTest(TestTAdicionarProdutoVendaPorCodBarras.Suite);
  RegisterTest(TestTAdicionarProdutoVendaPorID.Suite);
  RegisterTest(TestTCancelarVenda.Suite);
  RegisterTest(TestTCodigoBarraExistente.Suite);
  RegisterTest(TestTConfiguracoesShowfrmPrincipal.Suite);
  RegisterTest(TestTConsultarVendas.Suite);
  RegisterTest(TestTFinalizarVenda.Suite);
  RegisterTest(TestTIniciarNovaVenda.Suite);
  RegisterTest(TestTVendaIniciada.Suite);
  RegisterTest(TestTConsultarItensFrmShow.Suite);
  RegisterTest(TestTSalvarNovoProduto.Suite);
end.

